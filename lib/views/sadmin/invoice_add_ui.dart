import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../services/invoice_service.dart';
import '../../services/room_service.dart';
import '../../services/contract_service.dart';
import '../../services/utility_rate_service.dart';
import '../../services/meter_service.dart';
import '../../services/auth_service.dart';
import '../../services/payment_rate_service.dart';
import '../../models/user_models.dart';
import '../../widgets/colors.dart';

class InvoiceAddPage extends StatefulWidget {
  final Map<String, dynamic>? initialData;

  const InvoiceAddPage({Key? key, this.initialData}) : super(key: key);

  @override
  State<InvoiceAddPage> createState() => _InvoiceAddPageState();
}

class _InvoiceAddPageState extends State<InvoiceAddPage> {
  final _formKey = GlobalKey<FormState>();
  final _pageController = PageController();

  // Controllers
  final _discountAmountController = TextEditingController();
  final _discountReasonController = TextEditingController();
  final _lateFeeAmountController = TextEditingController();
  final _lateFeeReasonController = TextEditingController();
  final _notesController = TextEditingController();
  final _waterCurrentController = TextEditingController();
  final _electricCurrentController = TextEditingController();

  // Data
  UserModel? _currentUser;
  List<Map<String, dynamic>> _branches = [];
  List<Map<String, dynamic>> _rooms = [];
  List<Map<String, dynamic>> _contracts = [];
  List<Map<String, dynamic>> _fixedRates = [];
  List<Map<String, dynamic>> _selectedFixedRates = [];
  Map<String, dynamic>? _paymentSettings;

  // Form data
  String? _selectedBranchId;
  String? _selectedRoomId;
  String? _selectedTenantId;
  String? _selectedContractId;
  String? _readingId;
  String? _waterRateId;
  String? _electricRateId;
  int _invoiceMonth = DateTime.now().month;
  int _invoiceYear = DateTime.now().year;
  DateTime _dueDate = DateTime.now().add(const Duration(days: 7));

  // Financial data
  double _rentalAmount = 0.0;
  double _utilitiesAmount = 0.0;
  double _otherCharges = 0.0;
  double _discountAmount = 0.0;
  double _lateFeeAmount = 0.0;
  String _discountType = 'none';

  // Water and Electric meter data
  double _waterPreviousReading = 0.0;
  double _waterCurrentReading = 0.0;
  double _waterUsage = 0.0;
  double _waterRate = 0.0;
  double _waterCost = 0.0;

  double _electricPreviousReading = 0.0;
  double _electricCurrentReading = 0.0;
  double _electricUsage = 0.0;
  double _electricRate = 0.0;
  double _electricCost = 0.0;

  // Other charges
  List<Map<String, dynamic>> _otherChargesList = [];

  // UI State
  bool _isLoading = false;
  bool _isSubmitting = false;
  int _currentStep = 0;
  final int _totalSteps = 4;
  bool _isFromMeterReading = false;

  @override
  void initState() {
    super.initState();
    _initializeData();
  }

  @override
  void dispose() {
    _discountAmountController.dispose();
    _discountReasonController.dispose();
    _lateFeeAmountController.dispose();
    _lateFeeReasonController.dispose();
    _notesController.dispose();
    _waterCurrentController.dispose();
    _electricCurrentController.dispose();
    _pageController.dispose();
    super.dispose();
  }

  Future<void> _initializeData() async {
    setState(() => _isLoading = true);

    try {
      // 1. ‡πÇ‡∏´‡∏•‡∏î user ‡∏Å‡πà‡∏≠‡∏ô
      _currentUser = await AuthService.getCurrentUser();

      if (_currentUser == null) {
        _showErrorSnackBar('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
        setState(() => _isLoading = false);
        return;
      }

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö initialData ‡πÅ‡∏•‡∏∞ set ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      if (widget.initialData != null) {
        _isFromMeterReading = widget.initialData!['reading_id'] != null;
        _selectedBranchId = widget.initialData!['branch_id'];
        _selectedRoomId = widget.initialData!['room_id'];
        _selectedTenantId = widget.initialData!['tenant_id'];
        _selectedContractId = widget.initialData!['contract_id'];
        _readingId = widget.initialData!['reading_id'];
        _invoiceMonth =
            widget.initialData!['invoice_month'] ?? DateTime.now().month;
        _invoiceYear =
            widget.initialData!['invoice_year'] ?? DateTime.now().year;

        debugPrint(
            'üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡∏™‡∏≤‡∏Ç‡∏≤=$_selectedBranchId, ‡∏´‡πâ‡∏≠‡∏á=$_selectedRoomId, ‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå=$_readingId');
      }

      // 3. ‡πÇ‡∏´‡∏•‡∏î branches
      try {
        _branches = await RoomService.getBranchesForRoomFilter();
        debugPrint('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡πâ‡∏ß ${_branches.length} ‡∏™‡∏≤‡∏Ç‡∏≤');
      } catch (e) {
        debugPrint('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≤‡∏Ç‡∏≤: $e');
        _showErrorSnackBar('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÑ‡∏î‡πâ: $e');
      }

      // 4. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ branch_id ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      if (_selectedBranchId != null) {
        await _loadDataForBranch();
      }

      setState(() {});
    } catch (e) {
      debugPrint('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô _initializeData: $e');
      _showErrorSnackBar('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ branch_id
  Future<void> _loadDataForBranch() async {
    try {
      final results = await Future.wait([
        RoomService.getAllRooms(branchId: _selectedBranchId),
        UtilityRatesService.getActiveRatesForBranch(_selectedBranchId!),
        PaymentSettingsService.getActivePaymentSettings(_selectedBranchId!),
        if (_readingId != null)
          MeterReadingService.getMeterReadingById(_readingId!),
      ]);

      _rooms = results[0] as List<Map<String, dynamic>>;
      final utilityRates = results[1] as List<Map<String, dynamic>>;
      _paymentSettings = results[2] as Map<String, dynamic>?;

      // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡πà‡∏≤ rates ‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô metered ‡πÅ‡∏•‡∏∞ fixed
      _fixedRates =
          utilityRates.where((rate) => rate['is_fixed'] == true).toList();

      // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö rate_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÑ‡∏ü
      String? waterRateId;
      String? electricRateId;

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ rate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÑ‡∏ü
      for (var rate in utilityRates) {
        if (rate['is_metered'] == true) {
          final rateName = rate['rate_name'].toString().toLowerCase();
          if (rateName.contains('‡∏ô‡πâ‡∏≥') || rateName.contains('water')) {
            _waterRate = (rate['rate_price'] ?? 0.0).toDouble();
            waterRateId = rate['rate_id'];
          }
          if (rateName.contains('‡πÑ‡∏ü') || rateName.contains('electric')) {
            _electricRate = (rate['rate_price'] ?? 0.0).toDouble();
            electricRateId = rate['rate_id'];
          }
        }
      }

      // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö rate_id ‡πÄ‡∏õ‡πá‡∏ô instance variable
      _waterRateId = waterRateId;
      _electricRateId = electricRateId;

      // ‚úÖ Apply meter reading data ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (_readingId != null && results.length > 3) {
        final reading = results[3] as Map<String, dynamic>?;
        if (reading != null) {
          _applyMeterReadingData(reading);
        }
      }

      // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î contracts ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      if (_selectedRoomId != null) {
        await _loadContractsForRoom();
      }
    } catch (e) {
      debugPrint('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤: $e');
      _showErrorSnackBar('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: $e');
    }
  }

  void _addFixedRate(Map<String, dynamic> rate) {
    setState(() {
      _selectedFixedRates.add({
        'rate_id': rate['rate_id'],
        'rate_name': rate['rate_name'],
        'fixed_amount': rate['fixed_amount'],
        'additional_charge': rate['additional_charge'] ?? 0.0,
      });
      _calculateOtherChargesTotal();
    });
  }

  void _removeFixedRate(int index) {
    setState(() {
      _selectedFixedRates.removeAt(index);
      _calculateOtherChargesTotal();
    });
  }

  void _calculateOtherChargesTotal() {
    double total = 0.0;
    for (var rate in _selectedFixedRates) {
      total += (rate['fixed_amount'] ?? 0.0).toDouble();
      total += (rate['additional_charge'] ?? 0.0).toDouble();
    }
    _otherCharges = total;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: Apply ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å meter reading
  void _applyMeterReadingData(Map<String, dynamic> reading) {
    _waterPreviousReading =
        (reading['water_previous_reading'] ?? 0.0).toDouble();
    _waterCurrentReading = (reading['water_current_reading'] ?? 0.0).toDouble();
    _waterUsage = (reading['water_usage'] ?? 0.0).toDouble();

    _electricPreviousReading =
        (reading['electric_previous_reading'] ?? 0.0).toDouble();
    _electricCurrentReading =
        (reading['electric_current_reading'] ?? 0.0).toDouble();
    _electricUsage = (reading['electric_usage'] ?? 0.0).toDouble();

    _waterCurrentController.text = _waterCurrentReading.toStringAsFixed(0);
    _electricCurrentController.text =
        _electricCurrentReading.toStringAsFixed(0);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
    if (_waterUsage > 0 && _waterRate > 0) {
      _waterCost = _waterUsage * _waterRate;
    }
    if (_electricUsage > 0 && _electricRate > 0) {
      _electricCost = _electricUsage * _electricRate;
    }

    _calculateUtilitiesTotal();

    debugPrint('üìä ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå: ‡∏ô‡πâ‡∏≥=$_waterUsage, ‡πÑ‡∏ü=$_electricUsage');
  }

  // ‚≠ê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÇ‡∏´‡∏•‡∏î contracts ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
  Future<void> _loadContractsForRoom() async {
    try {
      _contracts = await ContractService.getContractsByRoom(_selectedRoomId!);
      debugPrint('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß ${_contracts.length} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤');

      if (_contracts.isNotEmpty) {
        if (_selectedContractId == null) {
          // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å contract ‡∏ó‡∏µ‡πà active
          final activeContracts = _contracts
              .where((c) => c['contract_status'] == 'active')
              .toList();

          final selectedContract = activeContracts.isNotEmpty
              ? activeContracts.first
              : _contracts.first;

          _selectedContractId = selectedContract['contract_id'];
          _selectedTenantId = selectedContract['tenant_id'];

          // ‚≠ê ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏à‡∏≤‡∏Å contract
          _rentalAmount =
              (selectedContract['contract_price'] ?? 0.0).toDouble();

          debugPrint(
              'üè† ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤: $_selectedContractId, ‡πÄ‡∏ä‡πà‡∏≤: $_rentalAmount');
        } else {
          // ‚≠ê ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ contract_id ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏à‡∏≤‡∏Å contract ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
          final selectedContract = _contracts.firstWhere(
            (c) => c['contract_id'] == _selectedContractId,
            orElse: () => {},
          );
          if (selectedContract.isNotEmpty) {
            _rentalAmount =
                (selectedContract['contract_price'] ?? 0.0).toDouble();
            debugPrint('üè† ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤: $_rentalAmount');
          }
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å meter reading ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î previous readings
      if (!_isFromMeterReading && _selectedRoomId != null) {
        final suggestions =
            await MeterReadingService.getSuggestedPreviousReadings(
                _selectedRoomId!);
        if (suggestions != null) {
          _waterPreviousReading = suggestions['water_previous'] ?? 0.0;
          _electricPreviousReading = suggestions['electric_previous'] ?? 0.0;
          debugPrint(
              'üí° ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ô‡πâ‡∏≥=$_waterPreviousReading, ‡πÑ‡∏ü=$_electricPreviousReading');
        }
      }
    } catch (e) {
      debugPrint('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤: $e');
    }
  }

  Future<void> _loadRoomsAndContracts() async {
    if (_selectedBranchId == null) return;

    try {
      // ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á 3 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
      final results = await Future.wait([
        RoomService.getAllRooms(branchId: _selectedBranchId),
        UtilityRatesService.getActiveRatesForBranch(_selectedBranchId!),
        PaymentSettingsService.getActivePaymentSettings(_selectedBranchId!),
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ roomId ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î contract ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
        if (_selectedRoomId != null)
          ContractService.getContractsByRoom(_selectedRoomId!),
      ]);

      _rooms = results[0] as List<Map<String, dynamic>>;
      final utilityRates = results[1] as List<Map<String, dynamic>>;

      // ‚≠ê ‡πÄ‡∏Å‡πá‡∏ö payment settings
      _paymentSettings = results[2] as Map<String, dynamic>?;
      debugPrint(
          'üí∞ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß: ${_paymentSettings != null}');

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ rate
      for (var rate in utilityRates) {
        final rateName = rate['rate_name'].toString().toLowerCase();
        if (rateName.contains('‡∏ô‡πâ‡∏≥') || rateName.contains('water')) {
          _waterRate = (rate['rate_price'] ?? 0.0).toDouble();
        }
        if (rateName.contains('‡πÑ‡∏ü') || rateName.contains('electric')) {
          _electricRate = (rate['rate_price'] ?? 0.0).toDouble();
        }
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
      if (_waterUsage > 0 && _waterRate > 0) {
        _waterCost = _waterUsage * _waterRate;
      }
      if (_electricUsage > 0 && _electricRate > 0) {
        _electricCost = _electricUsage * _electricRate;
      }

      _calculateUtilitiesTotal();

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ contract results
      if (results.length > 3) {
        _contracts = results[3] as List<Map<String, dynamic>>;
        _applyContractData();
      }

      setState(() {});
    } catch (e) {
      debugPrint('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏ç‡∏ç‡∏≤: $e');
    }
  }

  // ‚≠ê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: Apply contract data ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
  void _applyContractData() {
    if (_contracts.isEmpty) return;

    if (_selectedContractId == null) {
      final activeContracts =
          _contracts.where((c) => c['contract_status'] == 'active').toList();
      final selectedContract =
          activeContracts.isNotEmpty ? activeContracts.first : _contracts.first;

      _selectedContractId = selectedContract['contract_id'];
      _selectedTenantId = selectedContract['tenant_id'];

      // ‚≠ê ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
      _rentalAmount = (selectedContract['contract_price'] ?? 0.0).toDouble();
      debugPrint('üè† ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤: $_rentalAmount');
    } else {
      final contract = _contracts.firstWhere(
        (c) => c['contract_id'] == _selectedContractId,
        orElse: () => {},
      );
      if (contract.isNotEmpty) {
        // ‚≠ê ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
        _rentalAmount = (contract['contract_price'] ?? 0.0).toDouble();
        debugPrint('üè† ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: $_rentalAmount');
      }
    }
  }

  Future<void> _loadContractData() async {
    if (_selectedRoomId == null) return;

    try {
      _contracts = await ContractService.getContractsByRoom(_selectedRoomId!);

      if (_contracts.isNotEmpty && _selectedContractId == null) {
        final activeContracts =
            _contracts.where((c) => c['contract_status'] == 'active').toList();

        final selectedContract = activeContracts.isNotEmpty
            ? activeContracts.first
            : _contracts.first;

        _selectedContractId = selectedContract['contract_id'];
        _selectedTenantId = selectedContract['tenant_id'];

        // ‚≠ê ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
        _rentalAmount = (selectedContract['contract_price'] ?? 0.0).toDouble();
      } else if (_selectedContractId != null) {
        final contract = _contracts.firstWhere(
          (c) => c['contract_id'] == _selectedContractId,
          orElse: () => {},
        );
        if (contract.isNotEmpty) {
          // ‚≠ê ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
          _rentalAmount = (contract['contract_price'] ?? 0.0).toDouble();
        }
      }

      if (!_isFromMeterReading) {
        final suggestions =
            await MeterReadingService.getSuggestedPreviousReadings(
                _selectedRoomId!);
        if (suggestions != null) {
          _waterPreviousReading = suggestions['water_previous'] ?? 0.0;
          _electricPreviousReading = suggestions['electric_previous'] ?? 0.0;
        }
      }

      setState(() {});
    } catch (e) {
      debugPrint('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤: $e');
    }
  }

  void _calculateUtilitiesTotal() {
    _utilitiesAmount = _waterCost + _electricCost;
  }

  double _calculateSubtotal() {
    return _rentalAmount + _utilitiesAmount + _otherCharges;
  }

  // ‚≠ê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ payment settings
  double _calculateGrandTotal() {
    final subtotal = _calculateSubtotal();

    // ‚≠ê ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ payment settings ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if (_paymentSettings != null) {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
      if (_paymentSettings!['enable_late_fee'] == true) {
        _lateFeeAmount = PaymentSettingsService.calculateLateFeeManual(
          settings: _paymentSettings!,
          dueDate: _dueDate,
          subtotal: subtotal,
          paymentDate: DateTime.now(),
        );
        _lateFeeAmountController.text = _lateFeeAmount.toStringAsFixed(2);
        debugPrint('üí∏ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß: $_lateFeeAmount');
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
      if (_paymentSettings!['enable_discount'] == true) {
        final discount = PaymentSettingsService.calculateEarlyDiscountManual(
          settings: _paymentSettings!,
          dueDate: _dueDate,
          subtotal: subtotal,
          paymentDate: DateTime.now(),
        );

        // ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÄ‡∏≠‡∏á
        if (_discountAmountController.text.isEmpty) {
          _discountAmount = discount;
          _discountAmountController.text = _discountAmount.toStringAsFixed(2);
          debugPrint('üéâ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß: $_discountAmount');
        }
      }
    }

    return subtotal - _discountAmount + _lateFeeAmount;
  }

  void _nextStep() {
    if (_currentStep < _totalSteps - 1) {
      if (_validateCurrentStep()) {
        setState(() => _currentStep++);
        _pageController.animateToPage(
          _currentStep,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeInOut,
        );
      }
    }
  }

  void _previousStep() {
    if (_currentStep > 0) {
      setState(() => _currentStep--);
      _pageController.animateToPage(
        _currentStep,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  bool _validateCurrentStep() {
    switch (_currentStep) {
      case 0:
        if (_selectedBranchId == null) {
          _showErrorSnackBar('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤');
          return false;
        }
        if (_selectedRoomId == null) {
          _showErrorSnackBar('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á');
          return false;
        }
        if (_selectedContractId == null) {
          _showErrorSnackBar('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤');
          return false;
        }
        // ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
        if (_rentalAmount <= 0) {
          _showErrorSnackBar('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
          return false;
        }
        return true;
      case 1:
        if (_waterCurrentReading < _waterPreviousReading) {
          _showErrorSnackBar(
              '‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ô‡πâ‡∏≥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤');
          return false;
        }
        if (_electricCurrentReading < _electricPreviousReading) {
          _showErrorSnackBar(
              '‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ü‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤');
          return false;
        }
        return true;
      default:
        return true;
    }
  }

  Future<void> _submitInvoice() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isSubmitting = true);

    try {
      final invoiceData = {
        'room_id': _selectedRoomId,
        'tenant_id': _selectedTenantId,
        'contract_id': _selectedContractId,
        'meter_reading_id': _readingId,
        'invoice_month': _invoiceMonth,
        'invoice_year': _invoiceYear,
        'issue_date': DateTime.now()
            .toIso8601String()
            .split('T')[0], // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ service ‡∏£‡∏π‡πâ
        'due_date': _dueDate.toIso8601String().split('T')[0],

        // ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
        'room_rent': _rentalAmount,

        // ‚úÖ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥
        'water_usage': _waterUsage,
        'water_rate': _waterRate,
        'water_cost': _waterCost,
        'water_rate_id': _waterRateId,
        // ‚úÖ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü
        'electric_usage': _electricUsage,
        'electric_rate': _electricRate,
        'electric_cost': _electricCost,
        'electric_rate_id': _electricRateId,

        // ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        'other_expenses': _otherCharges,

        // ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
        'discount_amount': _discountAmount,

        // ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
        'fixed_rates': _selectedFixedRates,

        // ‚úÖ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
        'notes': _notesController.text,
      };

      final result = await InvoiceService.createInvoice(invoiceData);

      if (result['success']) {
        if (mounted) {
          _showSuccessSnackBar('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          Navigator.pop(context, {'success': true});
        }
      } else {
        print(result['message']);
        _showErrorSnackBar(result['message'] ?? '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }
    } catch (e) {
      _showErrorSnackBar('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
    } finally {
      setState(() => _isSubmitting = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_isFromMeterReading
            ? '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå'
            : '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ'),
        backgroundColor: AppTheme.primary,
        foregroundColor: Colors.white,
        elevation: 0,
        actions: [
          if (_currentStep > 0)
            TextButton.icon(
              onPressed: _previousStep,
              icon: const Icon(Icons.arrow_back, color: Colors.white),
              label:
                  const Text('‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö', style: TextStyle(color: Colors.white)),
            ),
        ],
      ),
      body: _isLoading
          ? const Center(
              child: CircularProgressIndicator(color: AppTheme.primary))
          : Column(
              children: [
                _buildProgressIndicator(),
                Expanded(
                  child: Form(
                    key: _formKey,
                    child: PageView(
                      controller: _pageController,
                      physics: const NeverScrollableScrollPhysics(),
                      children: [
                        _buildBasicInfoStep(),
                        _buildUtilitiesStep(),
                        _buildChargesDiscountsStep(),
                        _buildSummaryStep(),
                      ],
                    ),
                  ),
                ),
                _buildBottomActions(),
              ],
            ),
    );
  }

  Widget _buildOtherChargesSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Text(
              '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            if (_fixedRates.isNotEmpty)
              ElevatedButton.icon(
                onPressed: _showAddFixedRateDialog,
                icon: const Icon(Icons.add, size: 18),
                label: const Text('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppTheme.primary,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 8,
                  ),
                ),
              ),
          ],
        ),
        const SizedBox(height: 12),

        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if (_selectedFixedRates.isEmpty)
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.grey[100],
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.grey[300]!),
            ),
            child: Center(
              child: Column(
                children: [
                  Icon(Icons.info_outline, color: Colors.grey[400], size: 32),
                  const SizedBox(height: 8),
                  Text(
                    _fixedRates.isEmpty
                        ? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
                        : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
                    style: TextStyle(color: Colors.grey[600]),
                  ),
                ],
              ),
            ),
          )
        else
          Column(
            children: [
              ...List.generate(_selectedFixedRates.length, (index) {
                final rate = _selectedFixedRates[index];
                final fixedAmount = (rate['fixed_amount'] ?? 0.0).toDouble();
                final additionalCharge =
                    (rate['additional_charge'] ?? 0.0).toDouble();
                final total = fixedAmount + additionalCharge;

                return Card(
                  margin: const EdgeInsets.only(bottom: 8),
                  child: Padding(
                    padding: const EdgeInsets.all(12),
                    child: Row(
                      children: [
                        // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
                        Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: Colors.purple.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Icon(
                            _getIconForRate(rate['rate_name']),
                            color: Colors.purple,
                            size: 20,
                          ),
                        ),
                        const SizedBox(width: 12),

                        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                rate['rate_name'],
                                style: const TextStyle(
                                  fontWeight: FontWeight.w600,
                                  fontSize: 14,
                                ),
                              ),
                              const SizedBox(height: 4),
                              Row(
                                children: [
                                  Text(
                                    '‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà: ${fixedAmount.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                                    style: TextStyle(
                                      fontSize: 12,
                                      color: Colors.grey[600],
                                    ),
                                  ),
                                  if (additionalCharge > 0) ...[
                                    Text(
                                      ' + ',
                                      style: TextStyle(
                                        fontSize: 12,
                                        color: Colors.grey[600],
                                      ),
                                    ),
                                    Text(
                                      '${additionalCharge.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                                      style: TextStyle(
                                        fontSize: 12,
                                        color: Colors.grey[600],
                                      ),
                                    ),
                                  ],
                                ],
                              ),
                            ],
                          ),
                        ),

                        // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.end,
                          children: [
                            Text(
                              '${total.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                                color: Colors.purple,
                              ),
                            ),
                          ],
                        ),

                        // ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
                        IconButton(
                          onPressed: () => _removeFixedRate(index),
                          icon: const Icon(Icons.close, size: 20),
                          color: Colors.red,
                          tooltip: '‡∏•‡∏ö',
                        ),
                      ],
                    ),
                  ),
                );
              }),
              const SizedBox(height: 8),

              // ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.purple[50],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.purple[200]!),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text(
                      '‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ:',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    Text(
                      '${_otherCharges.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.purple,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
      ],
    );
  }

  void _showAddFixedRateDialog() {
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    final availableRates = _fixedRates.where((rate) {
      return !_selectedFixedRates.any(
        (selected) => selected['rate_id'] == rate['rate_id'],
      );
    }).toList();

    if (availableRates.isEmpty) {
      _showErrorSnackBar('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.add_circle, color: AppTheme.primary),
            const SizedBox(width: 8),
            const Text('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'),
          ],
        ),
        content: SizedBox(
          width: double.maxFinite,
          child: ListView.builder(
            shrinkWrap: true,
            itemCount: availableRates.length,
            itemBuilder: (context, index) {
              final rate = availableRates[index];
              final fixedAmount = (rate['fixed_amount'] ?? 0.0).toDouble();
              final additionalCharge =
                  (rate['additional_charge'] ?? 0.0).toDouble();
              final total = fixedAmount + additionalCharge;

              return Card(
                child: ListTile(
                  leading: Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.purple.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Icon(
                      _getIconForRate(rate['rate_name']),
                      color: Colors.purple,
                    ),
                  ),
                  title: Text(
                    rate['rate_name'],
                    style: const TextStyle(fontWeight: FontWeight.w600),
                  ),
                  subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const SizedBox(height: 4),
                      Text('‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà: ${fixedAmount.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó'),
                      if (additionalCharge > 0)
                        Text(
                          '‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ${additionalCharge.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                        ),
                    ],
                  ),
                  trailing: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: [
                      Text(
                        '${total.toStringAsFixed(2)}',
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                          color: Colors.purple,
                        ),
                      ),
                      const Text(
                        '‡∏ö‡∏≤‡∏ó',
                        style: TextStyle(fontSize: 12),
                      ),
                    ],
                  ),
                  onTap: () {
                    Navigator.pop(context);
                    _addFixedRate(rate);
                  },
                ),
              );
            },
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
        ],
      ),
    );
  }

  IconData _getIconForRate(String rateName) {
    final name = rateName.toLowerCase();
    if (name.contains('‡πÑ‡∏ü') || name.contains('electric')) {
      return Icons.electric_bolt;
    }
    if (name.contains('‡∏ô‡πâ‡∏≥') || name.contains('water')) {
      return Icons.water_drop;
    }
    if (name.contains('‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á') || name.contains('common')) {
      return Icons.apartment;
    }
    if (name.contains('‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï') ||
        name.contains('‡πÄ‡∏ô‡πá‡∏ï') ||
        name.contains('internet') ||
        name.contains('wifi')) {
      return Icons.wifi;
    }
    if (name.contains('‡∏Ç‡∏¢‡∏∞') || name.contains('trash')) {
      return Icons.delete_outline;
    }
    if (name.contains('‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ') || name.contains('parking')) {
      return Icons.local_parking;
    }
    if (name.contains('‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢') || name.contains('security')) {
      return Icons.security;
    }
    return Icons.receipt_long;
  }

  Widget _buildProgressIndicator() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: AppTheme.primary,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: List.generate(_totalSteps, (index) {
          final isActive = index == _currentStep;
          final isCompleted = index < _currentStep;

          return Expanded(
            child: Container(
              margin: EdgeInsets.only(right: index < _totalSteps - 1 ? 8 : 0),
              child: Column(
                children: [
                  Container(
                    height: 4,
                    decoration: BoxDecoration(
                      color: isActive || isCompleted
                          ? Colors.white
                          : Colors.white.withOpacity(0.3),
                      borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _getStepTitle(index),
                    style: TextStyle(
                      color: isActive || isCompleted
                          ? Colors.white
                          : Colors.white.withOpacity(0.7),
                      fontSize: 12,
                      fontWeight:
                          isActive ? FontWeight.bold : FontWeight.normal,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),
          );
        }),
      ),
    );
  }

  String _getStepTitle(int step) {
    switch (step) {
      case 0:
        return '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô';
      case 1:
        return '‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£';
      case 2:
        return '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢';
      case 3:
        return '‡∏™‡∏£‡∏∏‡∏õ';
      default:
        return '';
    }
  }

  Widget _buildBasicInfoStep() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),

          DropdownButtonFormField<String>(
            value: _selectedBranchId,
            decoration: InputDecoration(
              labelText: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ *',
              border: const OutlineInputBorder(),
              enabled: !_isFromMeterReading,
            ),
            items: _branches.map((branch) {
              return DropdownMenuItem<String>(
                value: branch['branch_id'] as String,
                child:
                    Text('${branch['branch_name']} (${branch['branch_code']})'),
              );
            }).toList(),
            onChanged: _isFromMeterReading
                ? null
                : (value) {
                    setState(() {
                      _selectedBranchId = value;
                      _selectedRoomId = null;
                      _selectedContractId = null;
                      _selectedTenantId = null;
                      _rooms.clear();
                      _contracts.clear();
                      _rentalAmount = 0.0;
                      _waterRate = 0.0;
                      _electricRate = 0.0;
                      _paymentSettings = null;
                    });
                    _loadRoomsAndContracts();
                  },
            validator: (value) => value == null ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤' : null,
          ),
          const SizedBox(height: 16),

          DropdownButtonFormField<String>(
            value: _selectedRoomId,
            decoration: InputDecoration(
              labelText: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á *',
              border: const OutlineInputBorder(),
              enabled: !_isFromMeterReading && _rooms.isNotEmpty,
            ),
            items: _rooms.map((room) {
              return DropdownMenuItem<String>(
                value: room['room_id'] as String,
                child: Text('‡∏´‡πâ‡∏≠‡∏á ${room['room_number']}'),
              );
            }).toList(),
            onChanged: _isFromMeterReading
                ? null
                : (value) {
                    setState(() {
                      _selectedRoomId = value;
                      _selectedContractId = null;
                      _selectedTenantId = null;
                      _contracts.clear();
                      _rentalAmount = 0.0;
                    });
                    _loadContractData();
                  },
            validator: (value) => value == null ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á' : null,
          ),
          const SizedBox(height: 16),

          DropdownButtonFormField<String>(
            value: _selectedContractId,
            decoration: InputDecoration(
              labelText: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤ *',
              border: const OutlineInputBorder(),
              enabled: !_isFromMeterReading && _contracts.isNotEmpty,
            ),
            isExpanded: true,
            isDense: false,
            menuMaxHeight: 300,
            items: _contracts.map((contract) {
              return DropdownMenuItem<String>(
                value: contract['contract_id'] as String,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text('${contract['contract_num']}'),
                    Text(
                      '${contract['tenant_name']} - ${contract['contract_price']} ‡∏ö‡∏≤‡∏ó',
                      style: const TextStyle(fontSize: 12, color: Colors.grey),
                    ),
                  ],
                ),
              );
            }).toList(),
            onChanged: _isFromMeterReading
                ? null
                : (value) {
                    setState(() {
                      _selectedContractId = value;
                      final contract = _contracts
                          .firstWhere((c) => c['contract_id'] == value);
                      _selectedTenantId = contract['tenant_id'];
                      // ‚≠ê ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
                      _rentalAmount =
                          (contract['contract_price'] ?? 0.0).toDouble();
                      debugPrint('üí∞ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤: $_rentalAmount');
                    });
                  },
            validator: (value) => value == null ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤' : null,
          ),
          const SizedBox(height: 16),

          Row(
            children: [
              Expanded(
                child: DropdownButtonFormField<int>(
                  value: _invoiceMonth,
                  decoration: InputDecoration(
                    labelText: '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô *',
                    border: const OutlineInputBorder(),
                    enabled: !_isFromMeterReading,
                  ),
                  items: List.generate(12, (index) {
                    final month = index + 1;
                    return DropdownMenuItem<int>(
                      value: month,
                      child: Text(_getMonthName(month)),
                    );
                  }),
                  onChanged: _isFromMeterReading
                      ? null
                      : (value) {
                          setState(() => _invoiceMonth = value!);
                        },
                  validator: (value) =>
                      value == null ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' : null,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: DropdownButtonFormField<int>(
                  value: _invoiceYear,
                  decoration: InputDecoration(
                    labelText: '‡∏õ‡∏µ *',
                    border: const OutlineInputBorder(),
                    enabled: !_isFromMeterReading,
                  ),
                  items: List.generate(5, (index) {
                    final year = DateTime.now().year - 2 + index;
                    return DropdownMenuItem<int>(
                      value: year,
                      child: Text('$year'),
                    );
                  }),
                  onChanged: _isFromMeterReading
                      ? null
                      : (value) {
                          setState(() => _invoiceYear = value!);
                        },
                  validator: (value) => value == null ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ' : null,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),

          TextFormField(
            decoration: const InputDecoration(
              labelText: '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞ *',
              border: OutlineInputBorder(),
              suffixIcon: Icon(Icons.calendar_today),
            ),
            readOnly: true,
            controller: TextEditingController(text: _formatDate(_dueDate)),
            onTap: () async {
              final date = await showDatePicker(
                context: context,
                initialDate: _dueDate,
                firstDate: DateTime.now(),
                lastDate: DateTime.now().add(const Duration(days: 365)),
              );
              if (date != null) {
                setState(() => _dueDate = date);
              }
            },
          ),
          const SizedBox(height: 16),

          // ‚≠ê ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡πâ‡∏ß
          if (_selectedRoomId != null && _selectedContractId != null)
            _buildInfoCard(),
        ],
      ),
    );
  }

  Widget _buildUtilitiesStep() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Text(
                '‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥-‡πÑ‡∏ü',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              const Spacer(),
              if (_isFromMeterReading)
                Container(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.green[50],
                    borderRadius: BorderRadius.circular(4),
                    border: Border.all(color: Colors.green[200]!),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(Icons.check_circle,
                          size: 16, color: Colors.green[700]),
                      const SizedBox(width: 4),
                      Text(
                        '‡∏à‡∏≤‡∏Å‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå',
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.green[700],
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ),
            ],
          ),
          const SizedBox(height: 16),
          _buildUtilitySection(
            title: '‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥',
            icon: Icons.water_drop,
            color: Colors.blue,
            previousReading: _waterPreviousReading,
            currentReading: _waterCurrentReading,
            usage: _waterUsage,
            rate: _waterRate,
            cost: _waterCost,
            controller: _waterCurrentController,
            isReadOnly: _isFromMeterReading,
            onCurrentReadingChanged: (value) {
              setState(() {
                _waterCurrentReading = double.tryParse(value) ?? 0.0;
                _waterUsage = _waterCurrentReading - _waterPreviousReading;
                _waterCost = _waterUsage * _waterRate;
                _calculateUtilitiesTotal();
              });
            },
          ),
          const SizedBox(height: 16),
          _buildUtilitySection(
            title: '‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü',
            icon: Icons.electric_bolt,
            color: Colors.orange,
            previousReading: _electricPreviousReading,
            currentReading: _electricCurrentReading,
            usage: _electricUsage,
            rate: _electricRate,
            cost: _electricCost,
            controller: _electricCurrentController,
            isReadOnly: _isFromMeterReading,
            onCurrentReadingChanged: (value) {
              setState(() {
                _electricCurrentReading = double.tryParse(value) ?? 0.0;
                _electricUsage =
                    _electricCurrentReading - _electricPreviousReading;
                _electricCost = _electricUsage * _electricRate;
                _calculateUtilitiesTotal();
              });
            },
          ),
          const SizedBox(height: 24),
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.blue[50],
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.blue[200]!),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  '‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
                Text(
                  '${_utilitiesAmount.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.blue,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildUtilitySection({
    required String title,
    required IconData icon,
    required Color color,
    required double previousReading,
    required double currentReading,
    required double usage,
    required double rate,
    required double cost,
    required TextEditingController controller,
    required bool isReadOnly,
    required ValueChanged<String> onCurrentReadingChanged,
  }) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, color: color, size: 24),
              const SizedBox(width: 8),
              Text(title,
                  style: const TextStyle(
                      fontSize: 16, fontWeight: FontWeight.bold)),
              const Spacer(),
              Text(
                '${rate.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πà‡∏ß‡∏¢',
                style: TextStyle(color: Colors.grey[600], fontSize: 12),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤',
                        style: TextStyle(fontSize: 12, color: Colors.grey)),
                    Container(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 12, vertical: 8),
                      decoration: BoxDecoration(
                        color: Colors.grey[100],
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: Text(
                        previousReading.toStringAsFixed(0),
                        style: const TextStyle(
                            fontSize: 16, fontWeight: FontWeight.w500),
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        const Text('‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
                            style: TextStyle(fontSize: 12, color: Colors.grey)),
                        if (isReadOnly) ...[
                          const SizedBox(width: 4),
                          Icon(Icons.lock, size: 12, color: Colors.grey[600]),
                        ],
                      ],
                    ),
                    TextFormField(
                      controller: controller,
                      readOnly: isReadOnly,
                      decoration: InputDecoration(
                        border: const OutlineInputBorder(),
                        contentPadding: const EdgeInsets.symmetric(
                            horizontal: 12, vertical: 8),
                        filled: isReadOnly,
                        fillColor: isReadOnly ? Colors.grey[100] : null,
                      ),
                      keyboardType: TextInputType.number,
                      inputFormatters: [
                        FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*'))
                      ],
                      onChanged: isReadOnly ? null : onCurrentReadingChanged,
                    ),
                  ],
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
                        style: TextStyle(fontSize: 12, color: Colors.grey)),
                    Container(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 12, vertical: 8),
                      decoration: BoxDecoration(
                        color: color.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(6),
                        border: Border.all(color: color.withOpacity(0.3)),
                      ),
                      child: Text(
                        '${usage.toStringAsFixed(0)} ‡∏´‡∏ô‡πà‡∏ß‡∏¢',
                        style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w500,
                            color: color),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: color.withOpacity(0.05),
              borderRadius: BorderRadius.circular(6),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢:',
                  style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w500,
                      color: Colors.grey[700]),
                ),
                Text(
                  '${cost.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                  style: TextStyle(
                      fontSize: 16, fontWeight: FontWeight.bold, color: color),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // ‚≠ê Step 3: ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö (‡πÉ‡∏ä‡πâ Payment Settings ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  Widget _buildChargesDiscountsStep() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),

          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
          _buildAmountCard(
            title: '‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á',
            amount: _rentalAmount,
            color: Colors.green,
            icon: Icons.home,
          ),

          const SizedBox(height: 12),

          // ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
          _buildAmountCard(
            title: '‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥-‡πÑ‡∏ü',
            amount: _utilitiesAmount,
            color: Colors.blue,
            icon: Icons.water_drop,
          ),

          const SizedBox(height: 12),

          // ‚≠ê ‡πÉ‡∏ä‡πâ widget ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ
          _buildOtherChargesSection(),

          const SizedBox(height: 24),
          const Divider(),
          const SizedBox(height: 16),

          // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡πÑ‡∏î‡πâ (‡πÅ‡∏ö‡∏ö Read-only)
          const Text(
            '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8),
          Text(
            '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤',
            style: TextStyle(fontSize: 12, color: Colors.grey[600]),
          ),
          const SizedBox(height: 16),

          _buildDiscountDisplay(),
          const SizedBox(height: 16),
          _buildLateFeeDisplay(),

          const SizedBox(height: 24),

          // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
          TextFormField(
            controller: _notesController,
            decoration: const InputDecoration(
              labelText: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
              border: OutlineInputBorder(),
              prefixIcon: Icon(Icons.notes),
            ),
            maxLines: 3,
          ),
        ],
      ),
    );
  }

  // ‚≠ê Widget ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡πÑ‡∏î‡πâ (Read-only Display)
  Widget _buildDiscountDisplay() {
    final hasPaymentSettings = _paymentSettings != null;
    final isDiscountEnabled = hasPaymentSettings &&
        _paymentSettings!['is_active'] == true &&
        _paymentSettings!['enable_discount'] == true;

    if (!hasPaymentSettings || !isDiscountEnabled) {
      return Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.grey[50],
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.grey[300]!),
        ),
        child: Row(
          children: [
            Icon(Icons.discount_outlined, color: Colors.grey[400], size: 24),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: Colors.grey[600],
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î',
                    style: TextStyle(fontSize: 12, color: Colors.grey[500]),
                  ),
                ],
              ),
            ),
            Text(
              '0.00 ‡∏ö‡∏≤‡∏ó',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.grey[500],
              ),
            ),
          ],
        ),
      );
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏à‡∏≤‡∏Å Payment Settings
    final subtotal = _calculateSubtotal();
    final discountPercent = _paymentSettings!['early_payment_discount'] ?? 0;
    final earlyDays = _paymentSettings!['early_payment_days'] ?? 0;
    final discountAmount = PaymentSettingsService.calculateEarlyDiscountManual(
      settings: _paymentSettings!,
      dueDate: _dueDate,
      subtotal: subtotal,
      paymentDate: DateTime.now(),
    );

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_discountAmount != discountAmount) {
        setState(() {
          _discountAmount = discountAmount;
        });
      }
    });

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.green[50],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.green[300]!, width: 2),
      ),
      child: Column(
        children: [
          Row(
            children: [
              Icon(Icons.discount, color: Colors.green[700], size: 24),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î ($discountPercent%)',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.green[900],
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      '‡∏ä‡∏≥‡∏£‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î $earlyDays ‡∏ß‡∏±‡∏ô',
                      style: TextStyle(fontSize: 12, color: Colors.green[700]),
                    ),
                  ],
                ),
              ),
              Text(
                '-${discountAmount.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.green[700],
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(6),
            ),
            child: Row(
              children: [
                Icon(Icons.calculate, size: 16, color: Colors.green[600]),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ${subtotal.toStringAsFixed(2)} √ó $discountPercent% = ‡∏•‡∏î ${discountAmount.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                    style: TextStyle(
                      fontSize: 11,
                      color: Colors.grey[700],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // ‚≠ê Widget ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡πÑ‡∏î‡πâ (Read-only Display)
  Widget _buildLateFeeDisplay() {
    final hasPaymentSettings = _paymentSettings != null;
    final isLateFeeEnabled = hasPaymentSettings &&
        _paymentSettings!['is_active'] == true &&
        _paymentSettings!['enable_late_fee'] == true;

    if (!hasPaymentSettings || !isLateFeeEnabled) {
      return Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.grey[50],
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.grey[300]!),
        ),
        child: Row(
          children: [
            Icon(Icons.warning_amber_outlined,
                color: Colors.grey[400], size: 24),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: Colors.grey[600],
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö',
                    style: TextStyle(fontSize: 12, color: Colors.grey[500]),
                  ),
                ],
              ),
            ),
            Text(
              '0.00 ‡∏ö‡∏≤‡∏ó',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.grey[500],
              ),
            ),
          ],
        ),
      );
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Payment Settings
    final subtotal = _calculateSubtotal();
    final lateFeeType = _paymentSettings!['late_fee_type'] ?? 'fixed';
    final lateFeeAmount = _paymentSettings!['late_fee_amount'] ?? 0;
    final startDay = _paymentSettings!['late_fee_start_day'] ?? 1;

    final calculatedLateFee = PaymentSettingsService.calculateLateFeeManual(
      settings: _paymentSettings!,
      dueDate: _dueDate,
      subtotal: subtotal,
      paymentDate: DateTime.now(),
    );

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_lateFeeAmount != calculatedLateFee) {
        setState(() {
          _lateFeeAmount = calculatedLateFee;
        });
      }
    });

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    final daysLate = DateTime.now().difference(_dueDate).inDays;
    final shouldCharge = daysLate >= startDay;

    if (!shouldCharge) {
      return Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.blue[50],
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.blue[300]!),
        ),
        child: Row(
          children: [
            Icon(Icons.info_outline, color: Colors.blue[700], size: 24),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: Colors.blue[900],
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏Ñ‡∏¥‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö (‡πÄ‡∏£‡∏¥‡πà‡∏° $startDay ‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î)',
                    style: TextStyle(fontSize: 12, color: Colors.blue[700]),
                  ),
                ],
              ),
            ),
            Text(
              '0.00 ‡∏ö‡∏≤‡∏ó',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.blue[700],
              ),
            ),
          ],
        ),
      );
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡πÑ‡∏î‡πâ
    String lateFeeTypeText = '';
    String calculationText = '';

    switch (lateFeeType) {
      case 'fixed':
        lateFeeTypeText = '${lateFeeAmount.toStringAsFixed(0)} ‡∏ö‡∏≤‡∏ó ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà';
        calculationText =
            '‡∏Ñ‡∏¥‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ${calculatedLateFee.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó';
        break;
      case 'percentage':
        lateFeeTypeText = '$lateFeeAmount% ‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°';
        calculationText =
            '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ${subtotal.toStringAsFixed(2)} √ó $lateFeeAmount% = ${calculatedLateFee.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó';
        break;
      case 'daily':
        final chargeDays = daysLate - startDay + 1;
        lateFeeTypeText = '${lateFeeAmount.toStringAsFixed(0)} ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô';
        calculationText =
            '‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤ $daysLate ‡∏ß‡∏±‡∏ô √ó ${lateFeeAmount.toStringAsFixed(0)} = ${calculatedLateFee.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó';
        break;
    }

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.red[50],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.red[300]!, width: 2),
      ),
      child: Column(
        children: [
          Row(
            children: [
              Icon(Icons.warning_amber, color: Colors.red[700], size: 24),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.red[900],
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      lateFeeTypeText,
                      style: TextStyle(fontSize: 12, color: Colors.red[700]),
                    ),
                  ],
                ),
              ),
              Text(
                '+${calculatedLateFee.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.red[700],
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(6),
            ),
            child: Row(
              children: [
                Icon(Icons.calculate, size: 16, color: Colors.red[600]),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    calculationText,
                    style: TextStyle(
                      fontSize: 11,
                      color: Colors.grey[700],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSummaryStep() {
    final subtotal = _calculateSubtotal();
    final grandTotal = _calculateGrandTotal();

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),

          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 12),
                  _buildSummaryRow('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô-‡∏õ‡∏µ',
                      '${_getMonthName(_invoiceMonth)} $_invoiceYear'),
                  _buildSummaryRow('‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î', _formatDate(_dueDate)),
                ],
              ),
            ),
          ),

          const SizedBox(height: 16),

          // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢',
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 12),

                  // ‚≠ê ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
                  _buildSummaryRow(
                      '‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á', '${_rentalAmount.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó'),

                  // ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥
                  _buildSummaryRow(
                      '‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥ (${_waterUsage.toStringAsFixed(0)} ‡∏´‡∏ô‡πà‡∏ß‡∏¢)',
                      '${_waterCost.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó'),

                  // ‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü
                  _buildSummaryRow(
                      '‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü (${_electricUsage.toStringAsFixed(0)} ‡∏´‡∏ô‡πà‡∏ß‡∏¢)',
                      '${_electricCost.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó'),

                  // ‚≠ê ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                  if (_selectedFixedRates.isNotEmpty) ...[
                    const SizedBox(height: 8),
                    const Divider(height: 1),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Icon(Icons.receipt_long,
                            size: 16, color: Colors.grey[600]),
                        const SizedBox(width: 6),
                        Text(
                          '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ:',
                          style: TextStyle(
                            fontSize: 13,
                            fontWeight: FontWeight.w600,
                            color: Colors.grey[700],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    ...List.generate(_selectedFixedRates.length, (index) {
                      final rate = _selectedFixedRates[index];
                      final fixedAmount =
                          (rate['fixed_amount'] ?? 0.0).toDouble();
                      final additionalCharge =
                          (rate['additional_charge'] ?? 0.0).toDouble();
                      final total = fixedAmount + additionalCharge;

                      return Padding(
                        padding: const EdgeInsets.only(left: 24, bottom: 6),
                        child: Row(
                          children: [
                            Icon(
                              _getIconForRate(rate['rate_name']),
                              size: 14,
                              color: Colors.purple[400],
                            ),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Text(
                                rate['rate_name'],
                                style: TextStyle(
                                  fontSize: 13,
                                  color: Colors.grey[700],
                                ),
                              ),
                            ),
                            Text(
                              '${total.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                              style: TextStyle(
                                fontSize: 13,
                                fontWeight: FontWeight.w500,
                                color: Colors.purple[700],
                              ),
                            ),
                          ],
                        ),
                      );
                    }),
                  ],

                  const Divider(height: 24),
                  _buildSummaryRow(
                      '‡∏£‡∏ß‡∏°‡∏¢‡πà‡∏≠‡∏¢', '${subtotal.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                      isBold: true),
                  if (_discountAmount > 0)
                    _buildSummaryRow(
                        '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î', '-${_discountAmount.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                        color: Colors.green),
                  if (_lateFeeAmount > 0)
                    _buildSummaryRow('‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤',
                        '+${_lateFeeAmount.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                        color: Colors.red),
                  const Divider(height: 24),
                  _buildSummaryRow(
                    '‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô',
                    '${grandTotal.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                    isBold: true,
                    isLarge: true,
                    color: AppTheme.primary,
                  ),
                ],
              ),
            ),
          ),

          if (_notesController.text.isNotEmpty) ...[
            const SizedBox(height: 16),
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
                      style:
                          TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 8),
                    Text(_notesController.text),
                  ],
                ),
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildAmountCard({
    required String title,
    required double amount,
    required Color color,
    required IconData icon,
  }) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Row(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              title,
              style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w500),
            ),
          ),
          Text(
            '${amount.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSummaryRow(
    String label,
    String value, {
    bool isBold = false,
    bool isLarge = false,
    Color? color,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: TextStyle(
              fontSize: isLarge ? 16 : 14,
              fontWeight: isBold ? FontWeight.bold : FontWeight.normal,
              color: color,
            ),
          ),
          Text(
            value,
            style: TextStyle(
              fontSize: isLarge ? 16 : 14,
              fontWeight: isBold ? FontWeight.bold : FontWeight.normal,
              color: color,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoCard() {
    final contract = _contracts.firstWhere(
      (c) => c['contract_id'] == _selectedContractId,
      orElse: () => {},
    );

    if (contract.isEmpty) return const SizedBox.shrink();

    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.info_outline, color: Colors.blue[700], size: 20),
                const SizedBox(width: 8),
                const Text(
                  '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            const Divider(height: 20),
            _buildInfoRow('‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤', contract['tenant_name'] ?? '-'),
            _buildInfoRow('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', contract['tenant_phone'] ?? '-'),
            // ‚≠ê ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
            _buildInfoRow(
                '‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á', '${_rentalAmount.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          SizedBox(
            width: 80,
            child: Text(
              label,
              style: TextStyle(color: Colors.grey[600], fontSize: 14),
            ),
          ),
          const Text(': ', style: TextStyle(fontSize: 14)),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w500),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBottomActions() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Row(
        children: [
          if (_currentStep > 0)
            Expanded(
              child: OutlinedButton(
                onPressed: _previousStep,
                style: OutlinedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                ),
                child: const Text('‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö'),
              ),
            ),
          if (_currentStep > 0) const SizedBox(width: 12),
          Expanded(
            flex: 2,
            child: ElevatedButton(
              onPressed: _isSubmitting
                  ? null
                  : (_currentStep < _totalSteps - 1
                      ? _nextStep
                      : _submitInvoice),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppTheme.primary,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
              child: _isSubmitting
                  ? const SizedBox(
                      height: 20,
                      width: 20,
                      child: CircularProgressIndicator(
                        color: Colors.white,
                        strokeWidth: 2,
                      ),
                    )
                  : Text(
                      _currentStep < _totalSteps - 1
                          ? '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ'
                          : '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ',
                      style: const TextStyle(fontSize: 16),
                    ),
            ),
          ),
        ],
      ),
    );
  }

  String _getMonthName(int month) {
    const months = [
      '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°',
      '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå',
      '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°',
      '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô',
      '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°',
      '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
      '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°',
      '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°',
      '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô',
      '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°',
      '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô',
      '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    ];
    return months[month - 1];
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

  void _showErrorSnackBar(String message) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _showSuccessSnackBar(String message) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
}
