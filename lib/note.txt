-- ============================================
-- SUPABASE SCHEMA FOR RENTAL MANAGEMENT APP (UPDATED)
-- ============================================

-- Enable extension
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- ============================================
-- 1) CUSTOM AUTH - ระบบผู้ใช้งาน (UPDATED)
-- ============================================

CREATE TABLE public.users (
  user_id        uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_name      varchar(50)  UNIQUE NOT NULL,
  user_email     varchar(255) UNIQUE NOT NULL,
  user_pass      text         NOT NULL,
  role           varchar(20)  NOT NULL CHECK (role IN ('superadmin','admin','user','tenant')),
  permissions    jsonb        NOT NULL DEFAULT '[]'::jsonb, -- New field for detailed permissions
  last_login     timestamptz, -- New field for last login tracking
  is_active      boolean      NOT NULL DEFAULT true,
  created_by     uuid REFERENCES public.users(user_id),
  created_at     timestamptz  NOT NULL DEFAULT now(),
  updated_at     timestamptz  NOT NULL DEFAULT now()
);

-- Session management (Updated with last_activity)
CREATE TABLE public.user_sessions (
  session_id     uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id        uuid NOT NULL REFERENCES public.users(user_id) ON DELETE CASCADE,
  token          text UNIQUE NOT NULL,
  expires_at     timestamptz   NOT NULL,
  last_activity  timestamptz   NOT NULL DEFAULT now(), -- Track session activity
  user_agent     text, -- Track device/browser info
  ip_address     inet, -- Track IP address
  created_at     timestamptz   NOT NULL DEFAULT now()
);

-- ============================================
-- 2) BRANCHES - ระบบสาขา (UPDATED WITH owner_id)
-- ============================================

CREATE TABLE public.branches (
  branch_id      uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  branch_code    varchar(20)  UNIQUE NOT NULL,
  branch_name    varchar(255) NOT NULL,
  branch_image   text,
  branch_address text,
  owner_id       uuid REFERENCES public.users(user_id), -- Changed from owner_name to owner_id
  branch_desc    text, -- Changed from jsonb to text for simplicity
  is_active      boolean      NOT NULL DEFAULT true,
  created_by     uuid REFERENCES public.users(user_id),
  created_at     timestamptz  NOT NULL DEFAULT now(),
  updated_at     timestamptz  NOT NULL DEFAULT now() -- Added updated_at field
);

ALTER TABLE public.branches DROP COLUMN IF EXISTS owner_name;

-- Update branch service queries to join with users table for owner name
-- Create a view for easier querying of branch with owner info
CREATE OR REPLACE VIEW public.branches_with_owner AS
SELECT 
  b.*,
  u.user_name as owner_name
FROM public.branches b
LEFT JOIN public.users u ON b.owner_id = u.user_id;

-- Update indexes
DROP INDEX IF EXISTS idx_branches_owner_name;
CREATE INDEX idx_branches_owner_id ON public.branches(owner_id);

-- Sample data update (remove old owner_name inserts)
UPDATE public.branches SET owner_id = (
  SELECT user_id FROM public.users WHERE user_name = 'admin' LIMIT 1
) WHERE owner_id IS NULL;

-- ============================================
-- 3) ROOM MANAGEMENT - ระบบจัดการห้อง
-- ============================================

-- รูปภาพห้อง
CREATE TABLE public.room_images (
  image_id      uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  room_id       uuid NOT NULL REFERENCES public.rooms(room_id) ON DELETE CASCADE,
  image_url     text NOT NULL,
  is_primary    boolean NOT NULL DEFAULT false,
  display_order integer NOT NULL DEFAULT 0,
  created_at    timestamptz NOT NULL DEFAULT now()
);


-- 3.1 สิ่งอำนวยความสะดวก
CREATE TABLE public.amenities (
  amenities_id    uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  amenities_name  varchar(100) NOT NULL,
  amenities_icon  varchar(50),
  amenities_desc  text,
  created_at      timestamptz NOT NULL DEFAULT now()
);

-- 3.2 ประเภทห้อง
CREATE TABLE public.room_types (
  roomtype_id   uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  roomtype_name varchar(100) NOT NULL,
  roomtype_desc text,
  created_at    timestamptz NOT NULL DEFAULT now()
);

-- 3.3 หมวดหมู่ห้อง
CREATE TABLE public.room_categories (
  roomcate_id    uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  roomcate_name  varchar(100) NOT NULL,
  roomcate_desc  text,
  created_at     timestamptz NOT NULL DEFAULT now()
);

-- ตารางห้องหลัก
CREATE TABLE public.rooms (
  room_id          uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  branch_id        uuid REFERENCES public.branches(branch_id) ON DELETE CASCADE,
  room_number      varchar(20) NOT NULL,
  room_type_id     uuid REFERENCES public.room_types(roomtype_id),
  room_category_id uuid REFERENCES public.room_categories(roomcate_id),
  room_size        decimal(10,2),
  room_price       decimal(10,2) NOT NULL,
  room_deposit     decimal(10,2) NOT NULL,
  room_status      varchar(20) NOT NULL DEFAULT 'available'
                   CHECK (room_status IN ('available','occupied','maintenance','reserved')),
  room_desc        text,
  is_active        boolean NOT NULL DEFAULT true,
  created_by       uuid REFERENCES public.users(user_id),
  created_at       timestamptz NOT NULL DEFAULT now(),
  updated_at       timestamptz NOT NULL DEFAULT now(),
  UNIQUE(branch_id, room_number)
);



-- ความสัมพันธ์ห้องกับสิ่งอำนวยความสะดวก
CREATE TABLE public.room_amenities (
  room_id     uuid NOT NULL REFERENCES public.rooms(room_id) ON DELETE CASCADE,
  amenity_id  uuid NOT NULL REFERENCES public.amenities(amenities_id) ON DELETE CASCADE,
  PRIMARY KEY (room_id, amenity_id)
);

-- ============================================
-- 4) TENANTS - ระบบผู้เช่า
-- ============================================

CREATE TABLE public.tenants (
  tenant_id        uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id          uuid REFERENCES public.users(user_id),
  tenant_code      varchar(20)  UNIQUE NOT NULL,
  tenant_idcard    varchar(20)  UNIQUE NOT NULL,
  tenant_fullname  varchar(255) NOT NULL,
  tenant_phone     varchar(20)  NOT NULL,
  gender           varchar(10)  CHECK (gender IN ('male','female','other')),
  tenant_profile   text,
  is_active        boolean      NOT NULL DEFAULT true,
  created_by       uuid REFERENCES public.users(user_id),
  created_at       timestamptz  NOT NULL DEFAULT now(),
  updated_at       timestamptz  NOT NULL DEFAULT now()
);

-- สัญญาเช่า
CREATE TABLE public.rental_contracts (
  contract_id       uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  contract_num      varchar(50) UNIQUE NOT NULL,
  room_id           uuid REFERENCES public.rooms(room_id),
  tenant_id         uuid REFERENCES public.tenants(tenant_id),
  start_date        date NOT NULL,
  end_date          date NOT NULL,
  contract_price    decimal(10,2) NOT NULL,
  contract_deposit  decimal(10,2) NOT NULL,
  contract_paid     boolean NOT NULL DEFAULT false,
  payment_day       integer CHECK (payment_day BETWEEN 1 AND 31),
  contract_status   varchar(20) NOT NULL DEFAULT 'pending'
                    CHECK (contract_status IN ('active','expired','terminated','pending')),
  contract_document text,
  contract_note     text,
  created_by        uuid REFERENCES public.users(user_id),
  created_at        timestamptz NOT NULL DEFAULT now(),
  updated_at        timestamptz NOT NULL DEFAULT now()
);

-- ============================================
-- 5) ISSUE REPORTING - ระบบแจ้งปัญหา
-- ============================================

CREATE TABLE public.issue_reports (
  issue_id        uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  issue_num       varchar(50) UNIQUE NOT NULL,
  room_id         uuid REFERENCES public.rooms(room_id),
  tenant_id       uuid REFERENCES public.tenants(tenant_id),
  issue_type      varchar(50) NOT NULL
                  CHECK (issue_type IN ('repair','maintenance','complaint','suggestion','other')),
  issue_priority  varchar(20) NOT NULL DEFAULT 'medium'
                  CHECK (issue_priority IN ('low','medium','high','urgent')),
  issue_title     varchar(255) NOT NULL,
  issue_desc      text NOT NULL,
  issue_status    varchar(20) NOT NULL DEFAULT 'pending'
                  CHECK (issue_status IN ('pending','in_progress','resolved','cancelled')),
  assigned_to     uuid REFERENCES public.users(user_id),
  resolved_date   timestamptz,
  resolution_notes text,
  created_by      uuid REFERENCES public.users(user_id),
  created_at      timestamptz NOT NULL DEFAULT now(),
  updated_at      timestamptz NOT NULL DEFAULT now()
);

CREATE TABLE public.issue_images (
  image_id    uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  issue_id    uuid NOT NULL REFERENCES public.issue_reports(issue_id) ON DELETE CASCADE,
  image_url   text NOT NULL,
  description text,
  created_at  timestamptz NOT NULL DEFAULT now()
);

-- ============================================
-- 6) BILLING SYSTEM - ระบบบิลค่าเช่า
-- ============================================

-- 6.1 อัตราค่าบริการ
CREATE TABLE public.service_rates (
  service_id     uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  branch_id      uuid REFERENCES public.branches(branch_id) ON DELETE CASCADE,
  service_type   varchar(50)  NOT NULL,
  service_name   varchar(100) NOT NULL,
  rate_per_unit  decimal(10,2) NOT NULL,
  unit_type      varchar(20),
  is_active      boolean NOT NULL DEFAULT true,
  created_at     timestamptz NOT NULL DEFAULT now(),
  updated_at     timestamptz NOT NULL DEFAULT now(),
  UNIQUE(branch_id, service_type)
);

-- บิลหลัก
CREATE TABLE public.invoices (
  invoice_id                 uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  invoice_num                varchar(50) UNIQUE NOT NULL,
  contract_id                uuid REFERENCES public.rental_contracts(contract_id),
  room_id                    uuid REFERENCES public.rooms(room_id),
  tenant_id                  uuid REFERENCES public.tenants(tenant_id),
  billing_month              integer NOT NULL,
  billing_year               integer NOT NULL,
  rental_fee                 decimal(10,2) NOT NULL,
  electricity_unit_previous  integer DEFAULT 0,
  electricity_unit_current   integer DEFAULT 0,
  electricity_unit_used      integer GENERATED ALWAYS AS (electricity_unit_current - electricity_unit_previous) STORED,
  electricity_rate           decimal(10,2) DEFAULT 0,
  electricity_amount         decimal(10,2) DEFAULT 0,
  water_unit_previous        integer DEFAULT 0,
  water_unit_current         integer DEFAULT 0,
  water_unit_used            integer GENERATED ALWAYS AS (water_unit_current - water_unit_previous) STORED,
  water_rate                 decimal(10,2) DEFAULT 0,
  water_amount               decimal(10,2) DEFAULT 0,
  total_amount               decimal(10,2) NOT NULL,
  due_date                   date NOT NULL,
  invoice_status             varchar(20) NOT NULL DEFAULT 'pending'
                             CHECK (invoice_status IN ('pending','paid','overdue','cancelled')),
  invoice_notes              text,
  created_by                 uuid REFERENCES public.users(user_id),
  created_at                 timestamptz NOT NULL DEFAULT now(),
  updated_at                 timestamptz NOT NULL DEFAULT now(),
  UNIQUE (contract_id, billing_month, billing_year)
);

-- ค่าบริการเพิ่มเติม
CREATE TABLE public.invoice_additional_charges (
  id            uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  invoice_id    uuid NOT NULL REFERENCES public.invoices(invoice_id) ON DELETE CASCADE,
  charge_name   varchar(100) NOT NULL,
  charge_amount decimal(10,2) NOT NULL,
  quantity      integer NOT NULL DEFAULT 1,
  total_amount  decimal(10,2) GENERATED ALWAYS AS (charge_amount * quantity) STORED,
  description   text,
  created_at    timestamptz NOT NULL DEFAULT now()
);

-- ============================================
-- 7) PAYMENT SYSTEM - ระบบจ่ายเงิน
-- ============================================

CREATE TABLE public.payments (
  payment_id       uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  payment_number   varchar(50) UNIQUE NOT NULL,
  invoice_id       uuid REFERENCES public.invoices(invoice_id),
  tenant_id        uuid REFERENCES public.tenants(tenant_id),
  payment_date     timestamptz NOT NULL,
  payment_amount   decimal(10,2) NOT NULL,
  payment_method   varchar(30) NOT NULL CHECK (payment_method IN ('cash','transfer','credit_card','promptpay','other')),
  reference_number varchar(100),
  payment_slip_image text,
  payment_status   varchar(20) NOT NULL DEFAULT 'pending'
                   CHECK (payment_status IN ('pending','verified','rejected')),
  verified_by      uuid REFERENCES public.users(user_id),
  verified_date    timestamptz,
  payment_notes    text,
  created_by       uuid REFERENCES public.users(user_id),
  created_at       timestamptz NOT NULL DEFAULT now(),
  updated_at       timestamptz NOT NULL DEFAULT now()
);

-- ============================================
-- INDEXES (UPDATED)
-- ============================================

CREATE INDEX idx_users_user_name   ON public.users(user_name);
CREATE INDEX idx_users_user_email  ON public.users(user_email);
CREATE INDEX idx_users_role        ON public.users(role);
CREATE INDEX idx_users_last_login  ON public.users(last_login);

CREATE INDEX idx_sessions_token     ON public.user_sessions(token);
CREATE INDEX idx_sessions_expires   ON public.user_sessions(expires_at);
CREATE INDEX idx_sessions_activity  ON public.user_sessions(last_activity);

CREATE INDEX idx_branches_active   ON public.branches(is_active);
CREATE INDEX idx_branches_owner    ON public.branches(owner_id); -- New index for owner_id
CREATE INDEX idx_branches_updated  ON public.branches(updated_at); -- New index for updated_at

CREATE INDEX idx_rooms_branch      ON public.rooms(branch_id);
CREATE INDEX idx_rooms_status      ON public.rooms(room_status);

CREATE INDEX idx_tenants_user      ON public.tenants(user_id);
CREATE INDEX idx_tenants_idcard    ON public.tenants(tenant_idcard);

CREATE INDEX idx_contracts_room    ON public.rental_contracts(room_id);
CREATE INDEX idx_contracts_tenant  ON public.rental_contracts(tenant_id);
CREATE INDEX idx_contracts_status  ON public.rental_contracts(contract_status);

CREATE INDEX idx_issues_room       ON public.issue_reports(room_id);
CREATE INDEX idx_issues_tenant     ON public.issue_reports(tenant_id);
CREATE INDEX idx_issues_status     ON public.issue_reports(issue_status);

CREATE INDEX idx_invoices_contract ON public.invoices(contract_id);
CREATE INDEX idx_invoices_tenant   ON public.invoices(tenant_id);
CREATE INDEX idx_invoices_status   ON public.invoices(invoice_status);
CREATE INDEX idx_invoices_monthyr  ON public.invoices(billing_month, billing_year);

CREATE INDEX idx_payments_invoice  ON public.payments(invoice_id);
CREATE INDEX idx_payments_tenant   ON public.payments(tenant_id);
CREATE INDEX idx_payments_status   ON public.payments(payment_status);

-- ============================================
-- FUNCTIONS (UPDATED)
-- ============================================

CREATE OR REPLACE FUNCTION public.hash_password(password text)
RETURNS text LANGUAGE plpgsql AS $$
BEGIN
  RETURN crypt(password, gen_salt('bf'));
END$$;

CREATE OR REPLACE FUNCTION public.verify_password(password text, hash text)
RETURNS boolean LANGUAGE plpgsql AS $$
BEGIN
  RETURN hash = crypt(password, hash);
END$$;

CREATE OR REPLACE FUNCTION public.generate_token()
RETURNS text LANGUAGE plpgsql AS $
BEGIN
  RETURN encode(gen_random_bytes(32), 'hex');
END$;

-- New function to get default permissions based on role
CREATE OR REPLACE FUNCTION public.get_default_permissions(user_role text)
RETURNS jsonb LANGUAGE plpgsql AS $
BEGIN
  CASE user_role
    WHEN 'superadmin' THEN
      RETURN '["all"]'::jsonb;
    WHEN 'admin' THEN
      RETURN '["manage_rooms", "manage_tenants", "manage_contracts", "view_reports", "manage_issues"]'::jsonb;
    WHEN 'user' THEN
      RETURN '["view_rooms", "view_tenants", "view_contracts", "manage_issues"]'::jsonb;
    WHEN 'tenant' THEN
      RETURN '["view_own_data", "create_issues", "view_invoices", "make_payments"]'::jsonb;
    ELSE
      RETURN '[]'::jsonb;
  END CASE;
END$;

-- Updated trigger function to set updated_at
CREATE OR REPLACE FUNCTION public.set_updated_at()
RETURNS trigger LANGUAGE plpgsql AS $
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END$;

-- New trigger function for setting default permissions on user creation
CREATE OR REPLACE FUNCTION public.set_user_defaults()
RETURNS trigger LANGUAGE plpgsql AS $
BEGIN
  -- Set default permissions if not provided
  IF NEW.permissions = '[]'::jsonb OR NEW.permissions IS NULL THEN
    NEW.permissions = public.get_default_permissions(NEW.role);
  END IF;
  
  NEW.updated_at = now();
  RETURN NEW;
END$;

-- ============================================
-- TRIGGERS (UPDATED)
-- ============================================

-- Update user trigger to use new function
DROP TRIGGER IF EXISTS trg_users_updated_at ON public.users;
CREATE TRIGGER trg_users_updated_at     BEFORE INSERT OR UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION public.set_user_defaults();

-- Create trigger for branches updated_at (NEW)
CREATE TRIGGER trg_branches_updated_at  BEFORE UPDATE ON public.branches         FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();

CREATE TRIGGER trg_rooms_updated_at     BEFORE UPDATE ON public.rooms            FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();
CREATE TRIGGER trg_tenants_updated_at   BEFORE UPDATE ON public.tenants          FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();
CREATE TRIGGER trg_contracts_updated_at BEFORE UPDATE ON public.rental_contracts FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();
CREATE TRIGGER trg_issues_updated_at    BEFORE UPDATE ON public.issue_reports    FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();
CREATE TRIGGER trg_invoices_updated_at  BEFORE UPDATE ON public.invoices         FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();
CREATE TRIGGER trg_payments_updated_at  BEFORE UPDATE ON public.payments         FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();
CREATE TRIGGER trg_rates_updated_at     BEFORE UPDATE ON public.service_rates    FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();

-- ============================================
-- RLS (เปิดใช้ + อนุญาต anon ทั้งหมด ตามคำสั่ง)
-- ============================================

ALTER TABLE public.users                       ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_sessions               ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.branches                    ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.rooms                       ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.room_amenities              ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.room_images                 ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.amenities                   ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.room_types                  ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.room_categories             ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tenants                     ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.rental_contracts            ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.issue_reports               ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.issue_images                ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.service_rates               ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoices                    ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoice_additional_charges  ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.payments                    ENABLE ROW LEVEL SECURITY;

-- (ตามโจทย์ ให้ anon ทำได้ทั้งหมดในทุกตาราง)
DO $
DECLARE
  t text;
BEGIN
  FOR t IN
    SELECT tablename FROM pg_tables
    WHERE schemaname = 'public'
      AND tablename IN (
        'users','user_sessions','branches','rooms','room_images','room_amenities',
        'amenities','room_types','room_categories','tenants','rental_contracts',
        'issue_reports','issue_images','service_rates','invoices',
        'invoice_additional_charges','payments'
      )
  LOOP
    EXECUTE format('CREATE POLICY "anon_all_%I" ON public.%I FOR ALL USING (true) WITH CHECK (true);', t, t);
  END LOOP;
END$;

-- ============================================
-- STORAGE BUCKETS + POLICIES
-- ============================================

-- Create storage buckets for file uploads
INSERT INTO storage.buckets (id, name, public) 
VALUES 
  ('branch-images', 'branch-images', true),
  ('room-images', 'room-images', true),
  ('tenant-profiles', 'tenant-profiles', true),
  ('contract-documents', 'contract-documents', false),
  ('payment-slips', 'payment-slips', false),
  ('issue-images', 'issue-images', true)
ON CONFLICT (id) DO NOTHING;

-- Storage policies for public read access
CREATE POLICY "Public read access" ON storage.objects FOR SELECT USING (bucket_id IN ('branch-images', 'room-images', 'tenant-profiles', 'issue-images'));

-- Storage policies for authenticated users
CREATE POLICY "Authenticated users can upload" ON storage.objects FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Users can update own files" ON storage.objects FOR UPDATE USING (auth.uid()::text = (storage.foldername(name))[1]);
CREATE POLICY "Users can delete own files" ON storage.objects FOR DELETE USING (auth.uid()::text = (storage.foldername(name))[1]);

-- ============================================
-- SAMPLE DATA (สอดคล้องกับชื่อคอลัมน์ใหม่)
-- ============================================

INSERT INTO public.amenities (amenities_name, amenities_icon, amenities_desc) VALUES
  ('แอร์', 'ac_unit', 'เครื่องปรับอากาศ'),
  ('พัดลม', 'air', 'พัดลมเพดาน'),
  ('เตียง', 'bed', 'เตียงพร้อมที่นอน'),
  ('ตู้เสื้อผ้า', 'door_sliding', 'ตู้เสื้อผ้าบานเลื่อน'),
  ('โต๊ะ', 'desk', 'โต๊ะทำงาน'),
  ('เครื่องทำน้ำอุ่น', 'water_heater', 'เครื่องทำน้ำอุ่น'),
  ('WiFi', 'wifi', 'อินเทอร์เน็ตไร้สาย'),
  ('ที่จอดรถ', 'local_parking', 'ที่จอดรถส่วนตัว'),
  ('กล้องวงจรปิด', 'videocam', 'ระบบรักษาความปลอดภัย'),
  ('คีย์การ์ด', 'credit_card', 'ระบบคีย์การ์ด');

INSERT INTO public.room_types (roomtype_name, roomtype_desc) VALUES
  ('ห้องพัดลม', 'ห้องพักมีพัดลมเพดาน'),
  ('ห้องแอร์', 'ห้องพักมีเครื่องปรับอากาศ'),
  ('ห้อง Studio', 'ห้องพักแบบสตูดิโอ'),
  ('ห้อง 1 Bedroom', 'ห้องนอนแยก 1 ห้อง'),
  ('ห้อง 2 Bedroom', 'ห้องนอนแยก 2 ห้อง');

INSERT INTO public.room_categories (roomcate_name, roomcate_desc) VALUES
  ('ห้องเดี่ยว', 'ห้องพักสำหรับ 1 คน'),
  ('ห้องคู่', 'ห้องพักสำหรับ 2 คน'),
  ('ห้องครอบครัว', 'ห้องพักสำหรับครอบครัว'),
  ('บ้านเช่า', 'บ้านเดี่ยวให้เช่า'),
  ('ทาวน์เฮาส์', 'ทาวน์เฮาส์ให้เช่า');

-- ผู้ใช้แรก (superadmin) รหัสผ่าน: admin123
INSERT INTO public.users (user_name, user_email, user_pass, role)
VALUES ('admin', 'admin@rental.com', public.hash_password('admin123'), 'superadmin')
ON CONFLICT (user_name) DO NOTHING;

-- ============================================
-- UPDATE EXISTING DATA (Migration Script)
-- ============================================

-- If you already have data in branches table without updated_at, uncomment and run:
-- UPDATE public.branches SET updated_at = created_at WHERE updated_at IS NULL;

-- Add some sample branches with the new schema
INSERT INTO public.branches (branch_code, branch_name, branch_address, branch_desc, is_active, created_by)
SELECT 
  'BR001', 
  'สาขาสยามสแควร์', 
  '991 ถนนพระราม 1 แขวงปทุมวัน เขตปทุมวัน กรุงเทพมหานคร 10330',
  'สาขาหลักในย่านสยามสแควร์ ใจกลางเมือง',
  true,
  u.user_id
FROM public.users u 
WHERE u.user_name = 'admin'
ON CONFLICT (branch_code) DO NOTHING;

INSERT INTO public.branches (branch_code, branch_name, branch_address, branch_desc, is_active, created_by)
SELECT 
  'BR002', 
  'สาขาคลองเตย', 
  '123 ถนนสุขุมวิท แขวงคลองเตย เขตคลองเตย กรุงเทพมหานคร 10110',
  'สาขาในย่านคลองเตย ใกล้รถไฟฟ้า',
  true,
  u.user_id
FROM public.users u 
WHERE u.user_name = 'admin'
ON CONFLICT (branch_code) DO NOTHING;